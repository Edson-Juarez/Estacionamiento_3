/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.esta;

import Atxy2k.CustomTextField.RestrictedTextField;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Leandro
 */
public class consulta extends javax.swing.JPanel {

    private Component rootPane;

    /**
     * Creates new form consulta
     */
    public consulta() {
        initComponents();
        plaquitas.setVisible(false);
        RestrictedTextField r = new RestrictedTextField(plaquitas);
        r.setLimit(7);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        getEstAz = new javax.swing.JLabel();
        getEstAra = new javax.swing.JLabel();
        seleccion = new javax.swing.JComboBox<>();
        btn_buscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablita = new javax.swing.JTable();
        plaquitas = new javax.swing.JTextField();

        bg.setBackground(new java.awt.Color(255, 255, 255));
        bg.setPreferredSize(new java.awt.Dimension(1110, 460));
        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        bg.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 120, -1, -1));
        bg.add(getEstAz, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 400, 110, 20));
        bg.add(getEstAra, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 400, 110, 20));

        seleccion.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        seleccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Selecciona una consulta --", "Mostrar por placas", "Mostrar por servicio de Estacionamiento", "Mostrar por servicio de Lava auto", "Mostrar por servicio de Pensi√≥n", "Mostrar por servicio de Estacionamiento y Lava auto." }));
        seleccion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                seleccionItemStateChanged(evt);
            }
        });
        bg.add(seleccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 310, -1));

        btn_buscar.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        btn_buscar.setText("BUSCAR");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });
        bg.add(btn_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 30, 110, 30));

        tablita.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        tablita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablita.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(tablita);

        bg.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, 980, 290));

        plaquitas.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        plaquitas.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        plaquitas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                plaquitasKeyTyped(evt);
            }
        });
        bg.add(plaquitas, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 30, 150, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel miModelo;
        int op = seleccion.getSelectedIndex();

        switch (op) {
            case 1:
                miModelo = consultita();
                tablita.setModel(miModelo);
                plaquitas.setText("");
                break;
            case 2:
                miModelo = consultitaEs();
                tablita.setModel(miModelo);
                break;
            case 3:
                miModelo = consultitaLa();
                tablita.setModel(miModelo);
                break;
            case 4:
                miModelo = consultitaPe();
                tablita.setModel(miModelo);
                break;
            case 5:
                miModelo = consultitaAm();
                tablita.setModel(miModelo);
                break;
            default:
                JOptionPane.showMessageDialog(rootPane, "ELige una Consulta!!!");
        }


    }//GEN-LAST:event_btn_buscarActionPerformed

    private void seleccionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_seleccionItemStateChanged
        // TODO add your handling code here:
        String opcion = seleccion.getSelectedItem().toString();
        if (opcion.equals("Mostrar por placas")) {
            plaquitas.setVisible(true);
            plaquitas.getText();
        } else {
            plaquitas.setVisible(false);
        }
    }//GEN-LAST:event_seleccionItemStateChanged

    private void plaquitasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_plaquitasKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        if (Character.isLowerCase(caracter)) {
            evt.setKeyChar(Character.toUpperCase(caracter));

        }
    }//GEN-LAST:event_plaquitasKeyTyped

    public DefaultTableModel consultita() {
        DefaultTableModel miModelo = null;
        try {
            String titulos[] = {"Folio", "Placas", "Color", "Marca", "Fecha Ingreso", "Tipo de Vehiculo", "Importe", "Tipo de Servicio", "Observaciones"};
            String dts[] = new String[9];
            miModelo = new DefaultTableModel(null, titulos);
            Connection cn;
            cn = Dconexion.getConnection();
            String sql = "SELECT * FROM vehiculo WHERE placas = '" + plaquitas.getText() + "';";
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                dts[0] = rs.getString("idfolio");
                dts[1] = rs.getString("placas");
                dts[2] = rs.getString("color");
                dts[3] = rs.getString("marca");
                dts[4] = rs.getString("horaEntrada");
                dts[5] = rs.getString("tipoV");
                dts[6] = rs.getString("importe");
                dts[7] = rs.getString("tipoServicio");
                dts[8] = rs.getString("obser");
                miModelo.addRow(dts);
            }
        } catch (Exception ex) {

            ex.printStackTrace();
        }
        return miModelo;
    }

    public DefaultTableModel consultitaEs() {
        DefaultTableModel miModelo = null;
        try {
            String titulos[] = {"Folio", "Placas", "Color", "Marca", "Fecha Ingreso", "Tipo de Vehiculo", "Importe", "Tipo de Servicio", "Observaciones"};
            String dts[] = new String[9];
            miModelo = new DefaultTableModel(null, titulos);
            Connection cn;
            cn = Dconexion.getConnection();
            String sql = "SELECT * FROM vehiculo WHERE tipoServicio = 'Estacionamiento'";
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                dts[0] = rs.getString("idfolio");
                dts[1] = rs.getString("placas");
                dts[2] = rs.getString("color");
                dts[3] = rs.getString("marca");
                dts[4] = rs.getString("horaEntrada");
                dts[5] = rs.getString("tipoV");
                dts[6] = rs.getString("importe");
                dts[7] = rs.getString("tipoServicio");
                dts[8] = rs.getString("obser");
                miModelo.addRow(dts);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return miModelo;
    }

    public DefaultTableModel consultitaLa() {
        DefaultTableModel miModelo = null;
        try {
            String titulos[] = {"Folio", "Placas", "Color", "Marca", "Fecha Ingreso", "Tipo de Vehiculo", "Importe", "Tipo de Servicio", "Observaciones"};
            String dts[] = new String[9];
            miModelo = new DefaultTableModel(null, titulos);
            Connection cn;
            cn = Dconexion.getConnection();
            String sql = "SELECT * FROM vehiculo WHERE tipoServicio = 'Lava autos'";
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                dts[0] = rs.getString("idfolio");
                dts[1] = rs.getString("placas");
                dts[2] = rs.getString("color");
                dts[3] = rs.getString("marca");
                dts[4] = rs.getString("horaEntrada");
                dts[5] = rs.getString("tipoV");
                dts[6] = rs.getString("importe");
                dts[7] = rs.getString("tipoServicio");
                dts[8] = rs.getString("obser");
                miModelo.addRow(dts);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return miModelo;
    }

    public DefaultTableModel consultitaPe() {
        DefaultTableModel miModelo = null;
        try {
            String titulos[] = {"Folio", "Placas", "Color", "Marca", "Fecha Ingreso", "Tipo de Vehiculo", "Importe", "Tipo de Servicio", "Observaciones"};
            String dts[] = new String[9];
            miModelo = new DefaultTableModel(null, titulos);
            Connection cn;
            cn = Dconexion.getConnection();
            String sql = "SELECT * FROM vehiculo WHERE tipoServicio = 'Pension'";
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                dts[0] = rs.getString("idfolio");
                dts[1] = rs.getString("placas");
                dts[2] = rs.getString("color");
                dts[3] = rs.getString("marca");
                dts[4] = rs.getString("horaEntrada");
                dts[5] = rs.getString("tipoV");
                dts[6] = rs.getString("importe");
                dts[7] = rs.getString("tipoServicio");
                dts[8] = rs.getString("obser");
                miModelo.addRow(dts);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return miModelo;
    }

    public DefaultTableModel consultitaAm() {
        DefaultTableModel miModelo = null;
        try {
            String titulos[] = {"Folio", "Placas", "Color", "Marca", "Fecha Ingreso", "Tipo de Vehiculo", "Importe", "Tipo de Servicio", "Observaciones"};
            String dts[] = new String[9];
            miModelo = new DefaultTableModel(null, titulos);
            Connection cn;
            cn = Dconexion.getConnection();
            String sql = "SELECT * FROM vehiculo WHERE tipoServicio = 'Estacionamiento y lava autos'";
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                dts[0] = rs.getString("idfolio");
                dts[1] = rs.getString("placas");
                dts[2] = rs.getString("color");
                dts[3] = rs.getString("marca");
                dts[4] = rs.getString("horaEntrada");
                dts[5] = rs.getString("tipoV");
                dts[6] = rs.getString("importe");
                dts[7] = rs.getString("tipoServicio");
                dts[8] = rs.getString("obser");
                miModelo.addRow(dts);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return miModelo;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JLabel getEstAra;
    private javax.swing.JLabel getEstAz;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField plaquitas;
    private javax.swing.JComboBox<String> seleccion;
    private javax.swing.JTable tablita;
    // End of variables declaration//GEN-END:variables
}
